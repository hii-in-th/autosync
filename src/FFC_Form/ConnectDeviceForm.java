/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectDeviceForm.java
 *
 * Created on 28 เม.ย. 2554, 16:37:12
 */
package FFC_Form;

import AdbManager.AdbCommand;
import AdbManager.AdbFileManager;
import AdbManager.RunAdb;
import ConnectDatabase.DriverDataBase;
import DeviceManager.DriveBehavior;
import FileManager.FileManager;
import DeviceManager.DeviceInformation;
import DeviceManager.GetVolumeManager;
import Management.DeviceInformationManager;
import DeviceManager.RegisterDevice;
import FFC_Information.FFCInformationManager;
import FileManager.FileBehavior;
import FileManager.FileSettingDataBaseFFCManager;
import Information.FFCInformation;
import Service.Service;
import Transfer.ConvertDatabase;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import auto_sync_v2.Main;
import java.awt.Frame;
import java.awt.Point;
import java.awt.event.MouseEvent;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;




/**
 *
 * @author PeeT
 */
public class ConnectDeviceForm extends javax.swing.JFrame {
    private String driveNewdriver;
    Thread registerThread;
    boolean checkdevice;
    Point start_drag;
    Point start_loc;
    private String deviceMode;
   
    /** Creates new form ConnectDeviceForm */
    public ConnectDeviceForm() {
        initComponents();
        initialComponent();
        this.setAllbg();
        this.setVersion();
        this.setfont();
        this.setVisibleComponentOfRegisterDevice(false);
        ToolTipManager.sharedInstance().setInitialDelay(100);
        setLocationRelativeTo(null);
        this.decryptDialog.setLocationRelativeTo(null);
        CancelButton.setVisible(false);
        this.deviceListDialog.setLocationRelativeTo(null);
        this.decryptProgressBar.setIndeterminate(true);

        //deviceListTable.setVisible(false);
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        deviceListDialog = new javax.swing.JDialog();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jDeviceList = new javax.swing.JList();
        selectDeviceButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        decryptDialog = new javax.swing.JDialog();
        jLayeredPane11 = new javax.swing.JLayeredPane();
        jLabel17 = new javax.swing.JLabel();
        decryptTimeLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        decryptProgressBar = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        connectHeadLayeredPane = new javax.swing.JLayeredPane();
        jButton4 = new javax.swing.JButton();
        versionLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        connectTabPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        registerButton = new javax.swing.JButton();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        jLabel5 = new javax.swing.JLabel();
        findDeviceButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JDeviceList = new javax.swing.JList();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        serialLabel = new javax.swing.JLabel();
        deviceNameTextField = new javax.swing.JTextField();
        deviceModelTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLayeredPane8 = new javax.swing.JLayeredPane();
        connectButton = new javax.swing.JButton();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        deviceSerialLabel = new javax.swing.JLabel();
        deviceModelLabel = new javax.swing.JLabel();
        deviceStatusLabel = new javax.swing.JLabel();
        deviceNameLabel = new javax.swing.JLabel();
        DeviceNameLabel = new javax.swing.JLabel();
        DeviceModelLabel = new javax.swing.JLabel();
        DeviceSerialLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane9 = new javax.swing.JLayeredPane();
        jButton1 = new javax.swing.JButton();
        jLayeredPane10 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        registerDeviceProgressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        deviceListDialog.setTitle("Select Device");
        deviceListDialog.setMinimumSize(new java.awt.Dimension(350, 250));

        jLayeredPane3.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane3.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/deviceLisDialog_bg.jpg")))); // NOI18N

        jScrollPane2.setViewportView(jDeviceList);

        jScrollPane2.setBounds(10, 50, 310, 100);
        jLayeredPane3.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        selectDeviceButton.setText("Connect");
        selectDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDeviceButtonActionPerformed(evt);
            }
        });
        selectDeviceButton.setBounds(120, 160, 81, 30);
        jLayeredPane3.add(selectDeviceButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel14.setText("Select Device");
        jLabel14.setBounds(110, 20, 130, 17);
        jLayeredPane3.add(jLabel14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout deviceListDialogLayout = new javax.swing.GroupLayout(deviceListDialog.getContentPane());
        deviceListDialog.getContentPane().setLayout(deviceListDialogLayout);
        deviceListDialogLayout.setHorizontalGroup(
            deviceListDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        deviceListDialogLayout.setVerticalGroup(
            deviceListDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        decryptDialog.setEnabled(false);
        decryptDialog.setMinimumSize(new java.awt.Dimension(315, 180));
        decryptDialog.setResizable(false);
        decryptDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                decryptDialogWindowClosing(evt);
            }
        });

        jLayeredPane11.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/FFC_Background/decryptdialog_bg.png")))); // NOI18N

        jLabel17.setText("Time :");
        jLabel17.setBounds(20, 110, 50, -1);
        jLayeredPane11.add(jLabel17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        decryptTimeLabel.setText("0");
        decryptTimeLabel.setBounds(80, 110, 30, -1);
        jLayeredPane11.add(decryptTimeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel16.setText("Sec.");
        jLabel16.setBounds(110, 110, 50, -1);
        jLayeredPane11.add(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);
        decryptProgressBar.setBounds(20, 80, 276, 22);
        jLayeredPane11.add(decryptProgressBar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel10.setText("กรุณารอสักครู่...");
        jLabel10.setBounds(20, 40, 140, 27);
        jLayeredPane11.add(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel12.setText("กำลังถอดรหัสข้อมูล");
        jLabel12.setBounds(100, 10, 158, 25);
        jLayeredPane11.add(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout decryptDialogLayout = new javax.swing.GroupLayout(decryptDialog.getContentPane());
        decryptDialog.getContentPane().setLayout(decryptDialogLayout);
        decryptDialogLayout.setHorizontalGroup(
            decryptDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );
        decryptDialogLayout.setVerticalGroup(
            decryptDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        jLayeredPane1.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/bg3.jpg")))); // NOI18N
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(800, 550));

        connectHeadLayeredPane.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/header_new2.jpg")))); // NOI18N
        connectHeadLayeredPane.setPreferredSize(new java.awt.Dimension(900, 100));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/homeIcon.png"))); // NOI18N
        jButton4.setBorder(null);
        jButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/homeIcon_mouseOver.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(30, 10, 70, 70);
        connectHeadLayeredPane.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        versionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        versionLabel.setText("Version");
        versionLabel.setBounds(680, 20, 140, 20);
        connectHeadLayeredPane.add(versionLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/close-green20x20.png"))); // NOI18N
        jButton2.setPreferredSize(new java.awt.Dimension(32, 32));
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/close-green2.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setBounds(850, 10, 20, 20);
        connectHeadLayeredPane.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/minimize-green20x20.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(830, 10, 20, 20);
        connectHeadLayeredPane.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        connectHeadLayeredPane.setBounds(10, 10, 880, 100);
        jLayeredPane1.add(connectHeadLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        connectTabPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        connectTabPane.setMinimumSize(new java.awt.Dimension(780, 408));
        connectTabPane.setPreferredSize(new java.awt.Dimension(780, 408));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLayeredPane4.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane4.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/background_newer.jpg")))); // NOI18N

        registerButton.setText("Register Device");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        registerButton.setBounds(500, 340, 130, 60);
        jLayeredPane4.add(registerButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane5.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/bg680x180.png")))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Search Device");
        jLabel5.setBounds(20, 10, 84, 20);
        jLayeredPane5.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        findDeviceButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        findDeviceButton.setText("Search Device");
        findDeviceButton.setToolTipText("คลิกเพื่อค้นหา Device ที่ต้องการเชื่อมต่อ");
        findDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDeviceButtonActionPerformed(evt);
            }
        });
        findDeviceButton.setBounds(60, 60, 141, 110);
        jLayeredPane5.add(findDeviceButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        JDeviceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                JDeviceListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(JDeviceList);

        jScrollPane3.setBounds(230, 60, 430, 110);
        jLayeredPane5.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane5.setBounds(30, 40, 680, 180);
        jLayeredPane4.add(jLayeredPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane6.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/bg_bg420x190.png")))); // NOI18N

        jLabel7.setText("Device Name : ");
        jLabel7.setBounds(30, 100, 100, 27);
        jLayeredPane6.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setText("Device model : ");
        jLabel6.setBounds(30, 140, 100, 30);
        jLayeredPane6.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel8.setText("Serial Number : ");
        jLabel8.setBounds(30, 60, 100, 27);
        jLayeredPane6.add(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Set up device");
        jLabel4.setBounds(30, 10, 83, 20);
        jLayeredPane6.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        serialLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        serialLabel.setBounds(140, 60, 237, 34);
        jLayeredPane6.add(serialLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        deviceNameTextField.setBounds(140, 100, 237, 29);
        jLayeredPane6.add(deviceNameTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deviceModelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceModelTextFieldActionPerformed(evt);
            }
        });
        deviceModelTextField.setBounds(140, 140, 237, 30);
        jLayeredPane6.add(deviceModelTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane6.setBounds(30, 250, 420, 190);
        jLayeredPane4.add(jLayeredPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );

        connectTabPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Image/registerTab.png")), jPanel3, "ลงทะเบียน Device ที่ต้องการเชื่อมต่อ"); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLayeredPane8.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/background_newer.jpg")))); // NOI18N

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        connectButton.setBounds(330, 270, 110, 40);
        jLayeredPane8.add(connectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane7.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/bg190x600.png")))); // NOI18N

        deviceSerialLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deviceSerialLabel.setText("Device Serial :");
        deviceSerialLabel.setBounds(110, 130, 94, 17);
        jLayeredPane7.add(deviceSerialLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deviceModelLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deviceModelLabel.setText("Device Model :");
        deviceModelLabel.setBounds(110, 100, 98, 17);
        jLayeredPane7.add(deviceModelLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deviceStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deviceStatusLabel.setText("Status :");
        deviceStatusLabel.setBounds(110, 160, 54, 17);
        jLayeredPane7.add(deviceStatusLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deviceNameLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deviceNameLabel.setText("Device Name :");
        deviceNameLabel.setBounds(110, 70, 97, 17);
        jLayeredPane7.add(deviceNameLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        DeviceNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
        DeviceNameLabel.setText("No device");
        DeviceNameLabel.setBounds(260, 70, 116, 20);
        jLayeredPane7.add(DeviceNameLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        DeviceModelLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
        DeviceModelLabel.setText("No device");
        DeviceModelLabel.setBounds(260, 100, 115, 16);
        jLayeredPane7.add(DeviceModelLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        DeviceSerialLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
        DeviceSerialLabel.setText("No device");
        DeviceSerialLabel.setBounds(260, 130, 240, 15);
        jLayeredPane7.add(DeviceSerialLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setText("Device Information");
        jLabel3.setBounds(30, 10, 240, 20);
        jLayeredPane7.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
        statusLabel.setText("Disconnect");
        statusLabel.setBounds(260, 150, 115, 30);
        jLayeredPane7.add(statusLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane7.setBounds(70, 60, 600, 190);
        jLayeredPane8.add(jLayeredPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );

        connectTabPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Image/connectTab.png")), jPanel4, "เชื่อมต่อ Device"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLayeredPane9.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/background_newer.jpg")))); // NOI18N

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(330, 180, 97, 36);
        jLayeredPane9.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane10.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/bg_ Punctuation_640x35.png")))); // NOI18N

        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("คำเตือน !!! การ Reset Device จะทำให้ข้อมูลการลงทะเบียนรวมทั้งฐานข้อมูลในอุปกรณ์ของคุณถูกลบไป");
        jLabel1.setBounds(80, 0, 567, 30);
        jLayeredPane10.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane10.setBounds(50, 110, 640, 35);
        jLayeredPane9.add(jLayeredPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );

        connectTabPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/Image/resetTab.png")), jPanel1, "ลบข้อมูลการลงทะเบียนและฐานข้อมูลในอุปกรณ์"); // NOI18N

        connectTabPane.setBounds(10, 110, 880, 470);
        jLayeredPane1.add(connectTabPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        connectTabPane.getAccessibleContext().setAccessibleDescription("");

        jLayeredPane2.setBorder(new javax.swing.border.MatteBorder(new javax.swing.ImageIcon(getClass().getResource("/Image/footer_newer.jpg")))); // NOI18N

        jLabel13.setText("ดำเนินการ : ");
        jLabel13.setBounds(140, 20, 80, 20);
        jLayeredPane2.add(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel9.setText("Time :");
        jLabel9.setBounds(410, 40, 50, 20);
        jLayeredPane2.add(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        timeLabel.setText("0");
        timeLabel.setBounds(480, 40, 30, 20);
        jLayeredPane2.add(timeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel11.setText("sec");
        jLabel11.setBounds(530, 40, 50, 20);
        jLayeredPane2.add(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        registerDeviceProgressBar.setPreferredSize(new java.awt.Dimension(350, 16));
        registerDeviceProgressBar.setStringPainted(true);
        registerDeviceProgressBar.setBounds(410, 20, -1, 20);
        jLayeredPane2.add(registerDeviceProgressBar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        progressLabel.setBounds(210, 20, 190, 20);
        jLayeredPane2.add(progressLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });
        CancelButton.setBounds(780, 20, 75, 30);
        jLayeredPane2.add(CancelButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(10, 580, 880, 60);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      MainForm.closeForm(1);
      Service.mainform.setLocation(Service.frameLocation);
      Main.openMain();
      
    }//GEN-LAST:event_jButton4ActionPerformed

    private void deviceModelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceModelTextFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_deviceModelTextFieldActionPerformed

    private void findDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDeviceButtonActionPerformed
        try {
            // TODO add your handling code here:
            this.searchDevice();
        } catch (IOException ex) {
            Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "พบปัญหาในการค้นหาอุปกรณ์ : " + ex.getMessage());
            return;
        }
    }//GEN-LAST:event_findDeviceButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        if(checkTextInput())
        {
            if(!"".equals(serialLabel.getText()))
            {
            System.out.println(deviceNameTextField.getText());
            System.out.println(deviceModelTextField.getText());
            if(!"".equals(deviceNameTextField.getText()) && !"".equals(deviceModelTextField.getText()))
            {
                    AdbCommand adbCommand = new AdbCommand();
                        String filePathForCheck = "/sdcard/Android/data/th.in.ffc/databases/";
                        String fileNameForCheck = "uJHCIS.db";
                   
                    if(false){

                        JOptionPane.showMessageDialog(this,"อุปกรณ์ลงทะเบียนแล้ว !!!");

                    }else{
                        filePathForCheck = "/sdcard/FFC/Db/";
                        fileNameForCheck = "mJHCIS.sdb";
                        if(adbCommand.checkFileOnAndroidExist(this.serialLabel.getText(),filePathForCheck, fileNameForCheck)){
                            int n = JOptionPane.showConfirmDialog(this, "พบไฟล์ฐานข้อมูล FFC Autosync เวอร์ชันเก่า \nต้องการลบหรือไม่?","Warning !!!",JOptionPane.WARNING_MESSAGE);
                            if(n == JOptionPane.YES_OPTION)
                            {
                                 AdbFileManager adbManager = new AdbFileManager();
                                 adbManager.setPathFileBat("./FFC/adb/adbrm.bat");
                                 adbManager.writeBatFileRemove(this.serialLabel.getText(), "/sdcard/FFC");
                                 RunAdb run = new RunAdb("./FFC/adb/adbrm.bat");
                                 if(run.runAdb()){
                                    this.registerDevice();
                                 }else{
                                    JOptionPane.showMessageDialog(this, "ลบไฟล์ไม่สำเร็จ!!!\n การลงทะเบียนไม่สำเร็จ","Error !!!",JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                            }
                            else
                            {
                                return;
                            }
                        }else{
                            this.registerDevice();
                        }
                    }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "กรุณากรอกข้อมูลให้ครบถ้วน");
            }
            }
            else
                JOptionPane.showMessageDialog(this, "กรุณาเลือกอุปกรณ์ที่ต้องการลงทะเบียน");
            }
        else
        {
        }   
    }//GEN-LAST:event_registerButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        registerThread.stop();
        CancelButton.setVisible(false);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        if("Disconnect".equals(statusLabel.getText()))
        {
            try {
                if (this.getNumDeviceConnect() > 1) {
                    DefaultListModel deviceList = new DefaultListModel();
                    try {
                        deviceList = new DriveBehavior().getSerialList();
                    } catch (IOException ex) {
                        Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "พบปัญหาในการเชื่อมต่ออุปกรณ์ : " + ex.getMessage());
                        return;
                    }
                    this.jDeviceList.setModel(deviceList);
                    this.deviceListDialog.setVisible(true);
                } else {
                    GetVolumeManager getserial = new GetVolumeManager("");
                    this.decryptTimeLabel.setText("0");
                    DeviceManager.ConnectDeviceAdb conndevice = new DeviceManager.ConnectDeviceAdb();
                    Thread thread = new Thread(conndevice);
                    conndevice.setSerialConnect(getserial.getSerialDrive().get(0).toString());
                    conndevice.getConnectDeviceThread(thread);
                    thread.start();
                }
            } catch (IOException ex) {
                Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "พบปัญหาในการเชื่อมต่ออุปกรณ์ : " + ex.getMessage());
                return;
            }
        }
        else
        {
             setDisconnectComponent();
             MainForm.transForm.resetValueLabelUpdate();
             JOptionPane.showMessageDialog(this, "ยกเลิกการเชื่อมต่อแล้ว");
           
        }
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(this,"คุณแน่ใจหรือว่าต้องการรีเซ็ตอุปกรณ์",
                "คำเตือน !!!",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        if(n == JOptionPane.YES_OPTION)
        {
            if(Service.connectDeviceStatus == false)
            {
               JOptionPane.showMessageDialog(this, "กรุณาเชื่อมต่ออุปกรณ์ก่อนทำการรีเซ็ต !!!");
            }
            else
            {
                AdbFileManager adbManager = new AdbFileManager();
                adbManager.setPathFileBat("./FFC/adb/adbrm.bat");
                adbManager.writeBatFileRemove(Service.serialDeviceConnect, "/sdcard/FFC");
                RunAdb runRmFFC = new RunAdb("./FFC/adb/adbrm.bat");

                if(runRmFFC.runAdb())
                {
                    adbManager.writeBatFileRemove(Service.serialDeviceConnect, "/sdcard/Android/data/th.or.nectec.ffc.familytree/files/uJHCIS.db");
                    RunAdb runRmuJHCIS = new RunAdb("./FFC/adb/adbrm.bat");

                    if(runRmuJHCIS.runAdb()){
                        try {
                            FFCInformationManager ffcInformationManager = new FFCInformationManager();
                            ffcInformationManager.openConnection(Service.ffcInformationPath);
                            ffcInformationManager.deleteInformation(Service.serialDeviceConnect);
                            ffcInformationManager.closeConnection();
                            //DeviceInformationManager deviceManager = new DeviceInformationManager();
                            //deviceManager.setFileURL("./FFC/device_information.ffc");
                            //deviceManager.deleteInformation(Service.serialDeviceConnect);
                            setDisconnectComponent();
                            System.out.println("format complete");
                            JOptionPane.showMessageDialog(this, "Reset Device สำเร็จ");
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else
                    {
                        JOptionPane.showMessageDialog(this, "Reset Device ไม่สำเร็จ");
                        return;
                    }
                }
                else
                {
                    System.out.println("format incomplete");
                    JOptionPane.showMessageDialog(this, "Reset Device ไม่สำเร็จ");
                }
            }
        }
        else
        {
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void JDeviceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_JDeviceListValueChanged
        // TODO add your handling code here:
        if(this.deviceMode.equals("MountMode")){
           if(JDeviceList.getSelectedIndex()>-1){
                String temp =JDeviceList.getModel().getElementAt(
                        JDeviceList.getSelectedIndex())
                        .toString();
                String[] tempSplit = temp.split(">");
                String[] tempValue = tempSplit[1].split("<");
                int valueDrive =Integer.parseInt( tempValue[0]);
                if(valueDrive < 100){
                    JOptionPane.showMessageDialog(this, "ต้องการพื้นที่ว่างอย่างน้อย 100 MB ในการลงทะเบียน");
                    //jDialogRegisterDevice.repaint();
                    return;
                }

                this.driveNewdriver=JDeviceList.getModel().getElementAt(
                        JDeviceList.getSelectedIndex())
                        .toString().substring(0,1);
                System.out.println(this.driveNewdriver);
                GetVolumeManager getVolumeManager =
                        new GetVolumeManager("./FFC/eject.bat");
                String volumdrive=getVolumeManager.getVolumeDrive(driveNewdriver);
                System.out.println(volumdrive);
                serialLabel.setText(volumdrive);
                //jButton7Setting1.setEnabled(true);
                this.setAlwaysOnTop(true);
                this.setEnabled(true);
                //jDialogRegisterDevice.show(false);
            }
        }
        if(this.deviceMode.equals("AdbMode")){
        this.serialLabel.setText(this.JDeviceList.getSelectedValue().toString());
        }
}//GEN-LAST:event_JDeviceListValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        FileManager filemanager = new FileManager();
        filemanager.deleteFile(Service.mJHCISPath);
        filemanager.deleteFile(Service.mJHCISsdbPath);
        filemanager.deleteFile(Service.uJHCISPath);
        RunAdb runAdb = new RunAdb("./FFC/adb/adbKillServer.bat");
        runAdb.runAdb();
        System.exit(0);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        //this.setLocation(this.getLocationOnScreen());
        
        Point current = this.getScreenLocation(evt);
        Point offset = new Point((int) current.getX() - (int) start_drag.getX(),
        (int) current.getY() - (int) start_drag.getY());
        Point new_location = new Point((int) (this.start_loc.getX() + offset.getX()), (int) (this.start_loc.getY() + offset.getY()));
        Service.frameLocation = new_location;
        this.setLocation(new_location);

    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        start_drag = this.getScreenLocation(evt);
        start_loc = this.getLocation();
    }//GEN-LAST:event_formMousePressed

    private void decryptDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_decryptDialogWindowClosing
        // TODO add your handling code here:
      /*  RunAdb runAdbKill = new RunAdb("./FFC/adb/adbKillServer.bat");
        runAdbKill.runAdb();
        RunAdb runAdb = new RunAdb("./FFC/adb/adbStartServer.bat");
        Thread run = new Thread(runAdb);
        run.start();
        FileManager fileManager = new FileManager();
        fileManager.deleteFile("./FFC/db_tmp/mJHCIS.sdb");*/
    }//GEN-LAST:event_decryptDialogWindowClosing

    private void selectDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDeviceButtonActionPerformed
        // TODO add your handling code here:
        if(this.jDeviceList.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "กรุณาเลือกอุปกรณ์");
        }else{
        this.decryptTimeLabel.setText("0");
        DeviceManager.ConnectDeviceAdb conndevice = new DeviceManager.ConnectDeviceAdb();
        Thread thread = new Thread(conndevice);
        conndevice.setSerialConnect(jDeviceList.getSelectedValue().toString());
        conndevice.getConnectDeviceThread(thread);
        thread.start();
        }
    }//GEN-LAST:event_selectDeviceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ConnectDeviceForm().setVisible(true);
            }
        });
    }
    
    public void registerDevice(DeviceInformation deviceInformation,String driverNewDriver)
    {
        System.out.println(driverNewDriver);
        FileManager fileManager = new FileManager();
         DeviceInformationManager deviceInformationManager =
                new DeviceInformationManager();
         deviceInformationManager.setFileURL("./FFC/device_information.ffc");
        fileManager.copyFile("./FFC/android/", driverNewDriver+":/");
    }
    
    public void setWaitPanelVisible(boolean check)
    {
        if(check)
        {
            CancelButton.setVisible(check);
           
        }
        else
        {
            CancelButton.setVisible(check);
            
        }
    }
    
    public void setConnection(FFCInformation ffcInformation, boolean connect)
    {  
        if(connect)
        {
            DeviceNameLabel.setText(ffcInformation.getdname());
            DeviceModelLabel.setText(ffcInformation.getdmodel());
            DeviceSerialLabel.setText(ffcInformation.getdserial());
            statusLabel.setText("Connected");
            Service.connectDeviceStatus = true;
        /*Service.deviceInformation = new DeviceInformation(
                    deviceInformation.getSerialDevice()
                    ,deviceInformation.getModelDevice()
                    ,deviceInformation.getNameDevice());*/

        //Main.connectionSQLite.connectSQLite(Service.driveDeviceConnect,":\\FFC\\DB\\mJHCIS.sdb");
            
        }
        this.deviceListDialog.setVisible(false);
    }
    
    private void initialComponent()
    {
        if(Service.connectDeviceStatus)
        {
            DeviceNameLabel.setText(Service.deviceInformation.getNameDevice());
            DeviceModelLabel.setText(Service.deviceInformation.getModelDevice());
            DeviceSerialLabel.setText(Service.deviceInformation.getSerialDevice());
            statusLabel.setText("Connected");
            connectButton.setText("Disconnect");
        }
   
    }
    
    public void setDisconnectComponent()
    {
        Service.connectDeviceStatus = false;
        Service.deviceInformation = null;
        Service.driveDeviceConnect = null;
        DeviceNameLabel.setText("No Device");
        DeviceModelLabel.setText("No Device");
        DeviceSerialLabel.setText("No Device");
        statusLabel.setText("Disconnect");
        connectButton.setText("Connect");
       MainForm.transForm.clearVillageOnAndroidList();
    }
    
    
    private boolean checkTextInput()
    {
        if(this.deviceNameTextField.getText().matches("[^ก-๙]*"))
        {
            if(this.deviceModelTextField.getText().matches("[^ก-๙]*"))
            {
                return true;
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Device Model ต้องเป็นตัวอักษรภาษาอังกฤษเท่านั้น", "Warning !!!", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        else
        {   
            JOptionPane.showMessageDialog(this, "Device Name ต้องเป็นตัวอักษรภาษาอังกฤษเท่านั้น", "Warning !!!", JOptionPane.WARNING_MESSAGE);
            System.out.println("can't use");
            return false;
        }
    }
    
    public void setSelectConnectTabPane()
    {
        this.connectTabPane.setSelectedIndex(1);
    }
    
    public void deviceListTableSelectedChange(javax.swing.event.TableModelListener evt){
        System.out.println("xxxxxxxxxxxxxxxxxxxxx");
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel DeviceModelLabel;
    private javax.swing.JLabel DeviceNameLabel;
    private javax.swing.JLabel DeviceSerialLabel;
    private javax.swing.JList JDeviceList;
    public static javax.swing.JButton connectButton;
    private javax.swing.JLayeredPane connectHeadLayeredPane;
    private javax.swing.JTabbedPane connectTabPane;
    private javax.swing.JDialog decryptDialog;
    private javax.swing.JProgressBar decryptProgressBar;
    private javax.swing.JLabel decryptTimeLabel;
    private javax.swing.JDialog deviceListDialog;
    private javax.swing.JLabel deviceModelLabel;
    private javax.swing.JTextField deviceModelTextField;
    private javax.swing.JLabel deviceNameLabel;
    private javax.swing.JTextField deviceNameTextField;
    private javax.swing.JLabel deviceSerialLabel;
    private javax.swing.JLabel deviceStatusLabel;
    private javax.swing.JButton findDeviceButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JList jDeviceList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane10;
    private javax.swing.JLayeredPane jLayeredPane11;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JLayeredPane jLayeredPane8;
    private javax.swing.JLayeredPane jLayeredPane9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JProgressBar registerDeviceProgressBar;
    private javax.swing.JButton selectDeviceButton;
    private javax.swing.JLabel serialLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

    private void setbackground(JComponent component, String imagePath){
        ImageIcon earth = new ImageIcon(imagePath);
        JLabel backlabel = new JLabel(earth);
        component.add(backlabel, new Integer(Integer.MIN_VALUE));
        backlabel.setBounds(0, 0, earth.getIconWidth(), earth.getIconHeight());
    }

    private void setAllbg(){
        this.setbackground(this.connectHeadLayeredPane,".\\src\\Image\\header_new2.png");
        this.setbackground(this.jLayeredPane4,".\\src\\Image\\background_newer.jpg");
        this.setbackground(this.jLayeredPane8,".\\src\\Image\\background_newer.jpg");
        this.setbackground(this.jLayeredPane9,".\\src\\Image\\background_newer.jpg");
        this.setbackground(this.jLayeredPane5,".\\src\\Image\\bg680x180.png");
        this.setbackground(this.jLayeredPane6,".\\src\\Image\\bg_bg420x190.png");
        this.setbackground(this.jLayeredPane1,".\\src\\Image\\bg3.jpg");
        this.setbackground(this.jLayeredPane2,".\\src\\Image\\footer_newer.jpg");
        this.setbackground(this.jLayeredPane7,".\\src\\Image\\bg190x600.png");
        this.setbackground(this.jLayeredPane10,".\\src\\Image\\bg_ Punctuation_640x35.png");
    }

    public void setProgerssLabel(String text){
        this.progressLabel.setText(text);
    }
    
    public void settimeLabel(String text){
        this.timeLabel.setText(text);
    }
    
    public void showMessagedialog(String Text){
        JOptionPane.showMessageDialog(this, Text);
    }
    
    public final void setVisibleComponentOfRegisterDevice(boolean set){
        this.jLabel13.setVisible(set);
        this.jLabel9.setVisible(set);
        this.jLabel11.setVisible(set);
        //this.waitPanel.setVisible(set);
        this.registerDeviceProgressBar.setVisible(set);
        //this.CancelButton.setVisible(set);
        this.progressLabel.setVisible(set);
        this.timeLabel.setVisible(set);
    }
    
    public void setValuesRegisterProgressbar(int values){
        this.registerDeviceProgressBar.setValue(values);
    }

    public void setDecryptTimeLabel(String time){
        this.decryptTimeLabel.setText(time);
    }

    public void setVisibleDecryptDialog(boolean set){
        this.decryptDialog.setVisible(set);
    }

    public void setVisibleDeiviceListDialog(Boolean set){
        this.deviceListDialog.setVisible(set);
    }

    Point getScreenLocation(MouseEvent e) {
    Point cursor = e.getPoint();
    Point target_location = this.getLocationOnScreen();
    return new Point((int) (target_location.getX() + cursor.getX()),
        (int) (target_location.getY() + cursor.getY()));
    }

    public void searchDevice() throws IOException{
        DefaultListModel deviceList = new DefaultListModel();
        deviceList = new DriveBehavior().getSerialList();
        if(deviceList.getSize()==0){
            Object[] options = {"Retry",
            "Cancel"};
            JOptionPane optionPane = new JOptionPane();
            int value = optionPane.showOptionDialog(this, "ไม่พบอุปกรณ์เชื่อมต่อ\n"
                    + "กรุณาเชื่อมต่ออุปกรณ์หรือทำการ mount อุปกรณ์\n"
                    + "หรือตรวจสอบ Setting -> Application -> "
                    + "Development -> USB Debugging บนอุปกรณ์",
                    "",JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,null,
                    options,JOptionPane.ERROR_MESSAGE);
           
            if (value == JOptionPane.YES_OPTION) {
                this.searchDevice();
            } else if (value == JOptionPane.NO_OPTION) {
                return;
            }
        }else{
            this.deviceMode = "AdbMode";
            JDeviceList.setModel(deviceList);
        }
    }

     public RunAdb.OnAdbErrorListener adblistener = new RunAdb.OnAdbErrorListener() {

        @Override
        public void onFailedToCopy() {
            JOptionPane.showMessageDialog(MainForm.transForm, "กรุณา Turn off USB Storage บนเครื่อง Android\n"
                    + "เนื่องจากระบบไม่สามารถเขียนไฟล์ฐานข้อมูลได้ !!!");
        }

        @Override
        public void onRemoteObjectNotExist() {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    };
    
    public void registerDevice(){
         DeviceInformation deviceInformation = new DeviceInformation(serialLabel.getText()
                , deviceNameTextField.getText()
                , deviceModelTextField.getText());
        RegisterDevice registerDevice = new RegisterDevice();

        registerDevice.setDeviceInformationAdb(this.serialLabel.getText()
                ,deviceNameTextField.getText(), deviceModelTextField.getText()
                ,deviceInformation);
        ConvertDatabase convertDatabase = new ConvertDatabase();
        FileSettingDataBaseFFCManager cManager = new FileSettingDataBaseFFCManager();
       cManager.setPathFile("./FFC/config_mysql_local.ffc");
       DriverDataBase driverDataBase = cManager.readDriverDataBase();
            
       convertDatabase.initConverter(".", "/FFC/Db_tmp/"
                     , this.serialLabel.getText(), ""
                     , driverDataBase);
       String query = "SELECT user.pcucode,user.username,user.password,user.officertype FROM user";
        try {
            convertDatabase.ConvertMysqlToSQLite(query, "uJHCIS.db");
            convertDatabase.hashUserPassword("uJHCIS.db");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "ลงทะเบียนอุปกรณ์ไม่สำเร็จ", "Error !!!", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ConnectDeviceForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        AdbManager.AdbFileManager adbManager = new AdbManager.AdbFileManager();
         adbManager.setPathFileBat("./FFC/adb/adbPush.bat");
         adbManager.writeAdbBatFileCopyPush(this.serialLabel.getText(),"../Db_tmp/uJHCIS.db", "/sdcard/Android/data/th.in.ffc/databases/uJHCIS.db");
         RunAdb pushUJHCIS = new RunAdb("./FFC/adb/adbPush.bat");
         pushUJHCIS.setOnAdbErrorListener(this.adblistener);
         if(!pushUJHCIS.runAdb()){
             //JOptionPane.showMessageDialog(this, "ลงทะเบียนอุปกรณ์ไม่สำเร็จ", "Error !!!", JOptionPane.ERROR_MESSAGE);
             return;
         }
        registerThread = new Thread(registerDevice);
        registerDevice.getRegisterThread(registerThread);
        registerThread.start();

        serialLabel.setText("");
        deviceNameTextField.setText("");
        deviceModelTextField.setText("");
    }

    private void setfont(){

        SetFont setFont = new SetFont();
        setFont.changeFont("THSarabun Bold.ttf",20f,this.jLabel12);
        setFont.changeFont("THSarabun.ttf", 18f, this.jLabel10,this.jLabel1);

     }

    private int getNumDeviceConnect() throws IOException{
        DefaultListModel deviceList = new DefaultListModel();
        deviceList = new DriveBehavior().getSerialList();
        System.out.println("device List Size : "+deviceList.getSize());
        return deviceList.getSize();
    }

    private void setVersion(){
        this.versionLabel.setText("Version "+Service.autosyncVersion);
    }

}

